LinearRegression:
  fit_intercept: [True, False]
  normalize: [True, False]

Ridge:
  alpha: [0.01, 0.1, 1.0, 10.0, 100.0]
  solver: ['auto', 'svd', 'cholesky', 'lsqr', 'sag', 'saga']

Lasso:
  alpha: [0.001, 0.01, 0.1, 1.0, 10.0]
  max_iter: [1000, 5000, 10000]
  selection: ['cyclic', 'random']

ElasticNet:
  alpha: [0.001, 0.01, 0.1, 1.0, 10.0]
  l1_ratio: [0.1, 0.5, 0.7, 0.9]
  max_iter: [1000, 5000, 10000]

DecisionTreeRegressor:
  criterion: ['squared_error', 'friedman_mse', 'absolute_error', 'poisson']
  max_depth: [5, 10, 20, None]
  min_samples_split: [2, 5, 10]
  min_samples_leaf: [1, 2, 5]

RandomForestRegressor:
  n_estimators: [50, 100, 200, 500]
  max_depth: [10, 20, 30, None]
  min_samples_split: [2, 5, 10]
  min_samples_leaf: [1, 2, 5]
  bootstrap: [True, False]

GradientBoostingRegressor:
  learning_rate: [0.01, 0.1, 0.2, 0.3]
  n_estimators: [100, 200, 500]
  subsample: [0.6, 0.8, 1.0]
  max_depth: [3, 5, 10]
  min_samples_split: [2, 5, 10]

XGBRegressor:
  learning_rate: [0.01, 0.1, 0.2, 0.3]
  n_estimators: [100, 200, 500]
  max_depth: [3, 5, 10]
  min_child_weight: [1, 3, 5]
  gamma: [0, 0.1, 0.2]
  subsample: [0.6, 0.8, 1.0]
  colsample_bytree: [0.6, 0.8, 1.0]

SVR:
  kernel: ['linear', 'poly', 'rbf', 'sigmoid']
  C: [0.1, 1, 10, 100]
  gamma: ['scale', 'auto']
  epsilon: [0.01, 0.1, 0.2, 0.5]

KNeighborsRegressor:
  n_neighbors: [3, 5, 10, 15]
  weights: ['uniform', 'distance']
  metric: ['euclidean', 'manhattan', 'minkowski']

MLPRegressor:
  hidden_layer_sizes: [(50,), (100,), (150,)]
  activation: ['relu', 'tanh']
  alpha: [0.0001, 0.001, 0.01]
  learning_rate: ['constant', 'invscaling', 'adaptive']
  max_iter: [200, 500, 1000]

DeepLearningRegressor:
  num_layers: [2, 3, 4]  # Number of hidden layers
  units_per_layer: [64, 128, 256]  # Number of neurons in each hidden layer
  activation: ['relu', 'tanh', 'sigmoid']
  dropout_rate: [0.0, 0.2, 0.5]
  optimizer: ['adam', 'sgd', 'rmsprop']
  learning_rate: [0.001, 0.01, 0.1]
  batch_size: [16, 32, 64]
  epochs: [50, 100, 200]
  loss_function: ['mse', 'mae']